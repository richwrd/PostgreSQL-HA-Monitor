#!/bin/bash

# Define o nome da stack
STACK_FILE="docker-compose.v5.yaml"

# Caminho do docker-compose
DOCKER_COMPOSE_CMD="sudo docker compose"

# Lista de portas utilizadas no docker-compose
PORTS=(
  "2379"  # etcd
  "5433"  # PostgreSQL (postgresql0)
  "8008"  # Patroni API (postgresql0)
  "5434"  # PostgreSQL (postgresql1)
  "8009"  # Patroni API (postgresql1)
  "5430"  # Pgpool (pgpool0)
  "9000"  # Watchdog (pgpool0)
  "5431"  # Pgpool (pgpool1)
  "9001"  # Watchdog (pgpool1)
  "9188"  # Pgpool (postgresql0-exporter)
  "9187"  # Pgpool (postgresql0-exporter)
  "5432"  # PostgreSQL CENTRAL (NGINX)
)

# Fun√ß√£o para dar permiss√£o a todos os arquivos do diret√≥rio atual
set_permissions() {
  echo -e "\nüîß Alterando permiss√µes de todos os arquivos no diret√≥rio atual para 777..."
  chmod -R 777 .
  if [ $? -eq 0 ]; then
    echo "‚úÖ Permiss√µes alteradas com sucesso."
  else
    echo "‚ùå Erro ao alterar permiss√µes dos arquivos."
    exit 1
  fi
}

# Fun√ß√£o para verificar se as portas est√£o em uso
check_ports() {
  echo -e "\nüîç Verificando se as portas definidas no docker-compose est√£o em uso..."
  for PORT in "${PORTS[@]}"; do
    if lsof -i:"$PORT" > /dev/null 2>&1; then
      echo "‚ö†Ô∏è A porta $PORT est√° em uso."
      while true; do
        echo -n "‚ùì Deseja finalizar o processo que est√° utilizando a porta $PORT? (s/n): "
        read -r RESPONSE
        case "$RESPONSE" in
          [sS])
            PID=$(lsof -t -i:"$PORT")
            echo "üî® Finalizando o processo $PID que est√° utilizando a porta $PORT..."
            kill -9 "$PID"
            if [ $? -eq 0 ]; then
              echo "‚úÖ Processo $PID finalizado com sucesso."
              if lsof -i:"$PORT" > /dev/null 2>&1; then
                echo "‚ùå Erro: A porta $PORT ainda est√° em uso ap√≥s tentar finalizar o processo."
                exit 1
              else
                echo "‚úÖ A porta $PORT foi liberada com sucesso."
              fi
            else
              echo "‚ùå Erro ao finalizar o processo $PID."
              exit 1
            fi
            break
            ;;
          [nN])
            echo "üö´ Porta $PORT continuar√° em uso. O script ser√° encerrado."
            exit 1
            ;;
          *)
            echo "‚ö†Ô∏è Resposta inv√°lida. Por favor, responda com 's' ou 'n'."
            ;;
        esac
      done
    else
      echo "‚úÖ A porta $PORT n√£o est√° em uso."
    fi
  done
}

# Fun√ß√£o para verificar e carregar o m√≥dulo softdog
initialize_watchdog() {
  echo -e "\nüêæ Verificando o m√≥dulo softdog..."
  if ! lsmod | grep -q softdog; then
    echo "üì¶ Carregando o m√≥dulo softdog..."
    sudo modprobe softdog
    if [ $? -eq 0 ]; then
      echo "‚úÖ M√≥dulo softdog carregado com sucesso."
    else
      echo "‚ùå Erro ao carregar o m√≥dulo softdog. Verifique as permiss√µes."
      exit 1
    fi
  else
    echo "‚úÖ M√≥dulo softdog j√° est√° carregado."
  fi
}

# Fun√ß√£o para criar a pasta watchdog
create_watchdog_folder() {
  WATCHDOG_DIR="/dev/watchdog"
  echo -e "\nüìÇ Verificando o dispositivo watchdog..."
  
  if [ -e "$WATCHDOG_DIR" ]; then
    echo "‚úÖ O dispositivo watchdog j√° existe."
    PERMS=$(stat -c "%a" "$WATCHDOG_DIR")
    if [ "$PERMS" != "777" ]; then
      echo "üîß Alterando permiss√µes do dispositivo watchdog para 777..."
      sudo chmod 777 "$WATCHDOG_DIR"
      if [ $? -eq 0 ]; then
        echo "‚úÖ Permiss√µes do dispositivo watchdog alteradas para 777 com sucesso."
      else
        echo "‚ùå Erro ao alterar permiss√µes do dispositivo watchdog."
        exit 1
      fi
    else
      echo "‚úÖ Dispositivo watchdog j√° possui as permiss√µes corretas."
    fi
  else
    echo "‚ùå Dispositivo watchdog n√£o encontrado."
    echo "‚ÑπÔ∏è O dispositivo watchdog deve ser criado pelo m√≥dulo do kernel."
    exit 1
  fi
}

# Fun√ß√£o para apagar e recriar os logs do Patroni
reset_patroni_logs() {
  LOG_DIRS=(
    "./postgresql-cluster/postgresql0/logs"
    "./postgresql-cluster/postgresql1/logs"
  )

  for LOG_DIR in "${LOG_DIRS[@]}"; do
    echo -e "\nüóëÔ∏è Apagando a pr√≥pria pasta de logs em $LOG_DIR..."
    if [ -d "$LOG_DIR" ]; then
      sudo rm -rf "$LOG_DIR"
      if [ $? -eq 0 ]; then
        echo "‚úÖ Pasta de logs apagada com sucesso em $LOG_DIR."
      else
        echo "‚ùå Erro ao apagar a pasta de logs em $LOG_DIR."
        exit 1
      fi
    else
      echo "üìÇ Diret√≥rio $LOG_DIR n√£o encontrado. Nenhuma a√ß√£o necess√°ria."
    fi

    echo "üì¶ Recriando diret√≥rio de logs em $LOG_DIR..."
    sudo mkdir -p "$LOG_DIR"
    sudo chmod 777 "$LOG_DIR"
    if [ $? -eq 0 ]; then
      echo "‚úÖ Diret√≥rio de logs recriado com sucesso em $LOG_DIR."
    else
      echo "‚ùå Erro ao recriar diret√≥rio de logs em $LOG_DIR."
      exit 1
    fi
  done
}

# Fun√ß√£o para deletar a stack
delete_stack() {
  echo -e "\nüóëÔ∏è Deletando a stack definida em $STACK_FILE..."
  $DOCKER_COMPOSE_CMD -f $STACK_FILE down
}

# Fun√ß√£o para subir a stack novamente
start_stack() {
  echo -e "\nüöÄ Subindo a stack definida em $STACK_FILE..."
  $DOCKER_COMPOSE_CMD -f $STACK_FILE up --build -d
}

# Menu de op√ß√µes
echo -e "\n‚û°Ô∏è Deseja deletar a stack? (s/n)"
read -r DELETE_STACK_RESPONSE
if [[ "$DELETE_STACK_RESPONSE" =~ ^[sS]$ ]]; then
  delete_stack
  reset_patroni_logs
fi

echo -e "\n‚û°Ô∏è Deseja checar as portas? (s/n)"
read -r CHECK_PORTS_RESPONSE
if [[ "$CHECK_PORTS_RESPONSE" =~ ^[sS]$ ]]; then
  check_ports
fi

# Executa as fun√ß√µes restantes
initialize_watchdog
create_watchdog_folder

#set_permissions

start_stack

echo -e "\n‚úÖ Processo conclu√≠do."
