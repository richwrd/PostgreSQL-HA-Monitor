services:
  # Serviço etcd (backend para o Patroni)
  etcd:
    image: quay.io/coreos/etcd:v3.5.0
    hostname: etcd
    container_name: etcd
    environment:
      - ETCD_NAME=etcd1
      - ETCD_DATA_DIR=/etcd-data
      - ETCD_LISTEN_CLIENT_URLS=http://0.0.0.0:2379
      - ETCD_ADVERTISE_CLIENT_URLS=http://etcd:2379
      - ETCD_INITIAL_CLUSTER=etcd1=http://etcd:2380
      - ETCD_INITIAL_ADVERTISE_PEER_URLS=http://etcd:2380
    ports:
      - "2379:2379" # Porta para clientes
      # - "2380:2380" # Porta para comunicação entre nós etcd (se tiver cluster)
    networks:
      - postgresql_network
    healthcheck:
      test: ["CMD", "etcdctl", "endpoint", "health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s


  postgresql0:
    build:
      context: ./postgresql-cluster/postgresql0/
      dockerfile: ./Dockerfile.patroni
    hostname: postgresql0
    container_name: postgresql0
    privileged: true
    volumes:
      - postgres-data0:/var/lib/postgresql/data
    ports:
      - "5433:5433" # Porta do PostgreSQL
      - "8008:8008" # Porta da API REST do Patroni
    networks:
      - postgresql_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8008/health"]
      interval: 10s
      timeout: 5s
      retries: 3
    depends_on:
      etcd:
        condition: service_healthy

  postgresql1:
    build:
      context: ./postgresql-cluster/postgresql1/
      dockerfile: ./Dockerfile.patroni
    hostname: postgresql1
    container_name: postgresql1
    privileged: true
    volumes:
      - postgres-data1:/var/lib/postgresql/data
    ports:
      - "5434:5434" # Porta do PostgreSQL
      - "8009:8009" # Porta da API REST do Patroni
    networks:
      - postgresql_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8009/health"]
      interval: 10s
      timeout: 5s
      retries: 3
    depends_on:
      etcd:
        condition: service_healthy
      postgresql0:
        condition: service_healthy

volumes:
  postgres-data0:
  postgres-data1:
  
networks:
  postgresql_network:
    driver: bridge